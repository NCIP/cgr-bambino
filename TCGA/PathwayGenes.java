package TCGA;

import java.io.*;
import java.net.*;
import java.util.*;
import java.util.zip.*;

public class PathwayGenes implements Runnable {

  private static HashMap<String,Pathway> pathways;
  private static ArrayList<String> pathway_names;
  private static HashMapArrayList gene2pathway;

  private static boolean load_started = false;
  private static boolean is_loaded = false;

  private static final boolean TRUNCATE_LONG_NAMES = false;
  // 9/2008: better to restrict JComboBox size w/setPrototypeDisplayValue()
  private static final int TRUNCATE_LENGTH = 100;

  public PathwayGenes () {
    if (load_started == false) {
      new Thread(this).start();
      load_started = true;
    }
  }

  public void run() {
    ClassLoader cl = this.getClass().getClassLoader();
    String resource = "TCGA/pathway_genes.tab.gz";
    // generated by lpgws501:~edmonson/bin/heatmap_db -generate-pathway-map
      
    URL load_url = cl == null ?
      ClassLoader.getSystemResource(resource) : cl.getResource(resource);

    pathways = new HashMap<String,Pathway>();
    gene2pathway = new HashMapArrayList();

    if (load_url != null) {
      try {
	URLConnection urlc = load_url.openConnection();
	InputStream is = urlc.getInputStream();
	BufferedReader br = new BufferedReader(new InputStreamReader(new GZIPInputStream(is)));
	String line;
	while ((line = br.readLine()) != null) {
	  String[] things = line.split("\t");
	  
	  String name = things[1];
	  if (TRUNCATE_LONG_NAMES && name.length() > TRUNCATE_LENGTH) {
	    name = name.substring(0, TRUNCATE_LENGTH) + "...";
	  }

	  Pathway p = new Pathway(name);
	  p.pathway_id = Integer.parseInt(things[0]);
	  for (int i = 2; i < things.length; i++) {
	    String gene = new String(things[i]);
	    p.add_gene(gene);
	    gene2pathway.put(gene, p);
	  }
	  pathways.put(p.name, p);
	}

	pathway_names = new ArrayList<String>(pathways.keySet());
	Collections.sort(pathway_names);

	is_loaded = true;
      } catch (Exception e) {
	System.err.println("ERROR:"+e);  // debug
      }
    }
  }
  
  public ArrayList<String> get_pathway_names() {
    return pathway_names;
  }

  public Pathway get_pathway (String name) {
    return pathways.get(name);
  }

  public static void main (String[] argv) {
    PathwayGenes pg = new PathwayGenes();
  }

  public boolean is_loaded() {
    return is_loaded;
  }

  public void sleep_until_ready() {
    // hacktacular
    while (!is_loaded) {
      try {
	Thread.sleep(100);
      } catch (Exception e) {};
    }
  }

  public ArrayList<Pathway> find_pathways_for_gene (String gene) {
    return gene2pathway.get(gene);
  }



}
