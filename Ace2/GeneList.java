package Ace2;

import java.io.*;
import java.net.*;
import java.util.*;
import java.util.zip.*;

public class GeneList implements Runnable {
  private static HashMap<String,GeneInfo> genes;
  private static boolean load_started = false;
  private static boolean is_loaded = false;

  public GeneList () {
    if (load_started == false) {
      new Thread(this).start();
      load_started = true;
    }
  }

  public void run() {
    ClassLoader cl = this.getClass().getClassLoader();
    String resource = "Ace2/gene_list.tab.gz";
    // generated by ~edmonson/bin/nextgen_db -generate-gene-map
      
    URL load_url = cl == null ?
      ClassLoader.getSystemResource(resource) : cl.getResource(resource);

    genes = new HashMap<String,GeneInfo>();

    if (load_url != null) {
      try {
	URLConnection urlc = load_url.openConnection();
	InputStream is = urlc.getInputStream();
	BufferedReader br = new BufferedReader(new InputStreamReader(new GZIPInputStream(is)));
	String line;
	while ((line = br.readLine()) != null) {
	  String[] things = line.split("\t");
	  
	  GeneInfo gi = new GeneInfo();
	  gi.name = new String(things[0]);
	  gi.chr = Chromosome.valueOfString(things[1]);
	  gi.start = Integer.valueOf(things[2]);
	  gi.end = Integer.valueOf(things[3]);
	  //	  System.err.println(gi.name);  // debug
	  genes.put(gi.name.toUpperCase(), gi);
	}
	is_loaded = true;
      } catch (Exception e) {
	System.err.println("ERROR:"+e);  // debug
      }
    }
  }
  
  public GeneInfo get_gene (String name) {
    return genes.get(name.toUpperCase());
  }

  public boolean is_loaded() {
    return is_loaded;
  }

  public void sleep_until_ready() {
    // hacktacular
    while (!is_loaded) {
      try {
	Thread.sleep(100);
      } catch (Exception e) {};
    }
  }



}
